## Resumen de Ramas

1. Estructura de Ramas

Ramas principales:

- main: Rama principal, donde se encuentra el código que está en producción o en una versión estable.
- develop: Rama de desarrollo, donde se realizan las integraciones de los cambios de backend y frontend antes de ser fusionados en main.
- back: Rama para todos los desarrolladores del backend.
- front: Rama para todos los desarrolladores del frontend.
  Ramas de características (features):
  Cada miembro del equipo debe crear ramas individuales basadas en features o tareas específicas dentro de su respectivo ámbito (backend o frontend).
  Ejemplos:
- Backend: back/feature-login, back/feature-auth, back/feature-payments
- Frontend: front/feature-ui-login, front/feature-dashboard, front/feature-cart

2. Proceso de Creación de Ramas

# Cambia a la rama de tu área (backend o frontend)

git checkout back # Para backend
git checkout front # Para frontend

# Actualiza tu rama (recomiendo actualizar constantemente)

git pull origin back # o front

# Crea una nueva rama para la feature

git checkout -b back/feature-nombre-feature # Para backend
git checkout -b front/feature-nombre-feature # Para frontend

3. Hacer Cambios y Push

- Agregar y confirmar los cambios:

git add .
git commit -m "Descripción clara de los cambios"

- Hacer push a tu rama remota:

git push origin back/feature-nombre-feature # Para backend
git push origin front/feature-nombre-feature # Para frontend

4. Proceso de Pull Request y Merge
   Una vez que hayas completado tu feature:
   Revisar y probar tu feature: Asegúrate de que todos los cambios funcionan correctamente y que has probado la funcionalidad.

Actualizar tu rama: Antes de hacer un pull request, asegúrate de que tu rama esté actualizada con la rama de tu entorno (back o front).

git checkout back # o front
git pull origin back # o front
git checkout back/feature-nombre-feature # o front/feature-nombre-feature
git merge back # o front

Resolver conflictos (si es necesario): Si hay conflictos, resuélvelos en tu rama.

Hacer un pull request: Crea un pull request para fusionar tu rama feature en la rama principal de desarrollo back o front.

Backend: Fusionar tu feature en back
Frontend: Fusionar tu feature en front
Revisión del pull request: Otro miembro del equipo revisa el pull request, verifica los cambios y aprueba.

Hacer el merge: Una vez aprobado el pull request, puedes hacer el merge en back o front.

5. Integración en develop y main
   Integración en develop:

Una vez que las ramas back y front estén listas y aprobadas, se puede hacer un pull request para fusionar ambos en la rama develop.
Hacer tests completos y revisiones de las integraciones antes de fusionar en main.
Integración en main:

## Cuando las funcionalidades hayan sido probadas en develop y estén listas para ser lanzadas, haz el merge final en main.

6. Mejores Prácticas

- Commit frecuentes: Es recomendable hacer commits con frecuencia y con mensajes claros.
- Mantener tu rama actualizada: Cada desarrollador debe hacer un git pull constante de back o front para evitar grandes conflictos al momento de hacer merge.
- Revisiones de código: Cada pull request debe ser revisado por otro miembro del equipo antes de hacer merge.
- Documentación: Mantener documentados los cambios y el estado del desarrollo, ya sea en un archivo README.md o en un tablero de trabajo (Trello, Jira, etc.).

## Uso de git para features (ramas de funciones especificas)

1. <git status> chequear el estado

On branch feature/migration-init
Your branch is up to date with 'origin/feature/migration-init'.
"

2. <git add > agrega al estado stage los cambios

3. <git commit -m "first migration success">
   "[feature/migration-init dccd1e2] first migration success
   3 files changed, 43 insertions(+), 12 deletions(-)"
   ps/PupShops/back/pupshops (feature/migration-init)

4. <git branch-> chequear en que rama estas

"back

- feature/migration-init <aca indica que estamos en la rama feature>
  front
  main"

5. <git branch -vv> Para ver si esta trackeado la rama local con la remota

   back 31beed3 typeorm config

- feature/migration-init dccd1e2 [origin/feature/migration-init: ahead 1] first migration success
  front fc0f350 [origin/front] resulucion de package json
  main 8a10093 [origin/main] Merge pull request #13 from fmonfasani/front

6. <git push> empuja todos los cambios commiteados

   Enumerating objects: 16, done.
   Counting objects: 100% (16/16), done.
   Delta compression using up to 8 threads
   Compressing objects: 100% (9/9), done.
   Writing objects: 100% (9/9), 1.93 KiB | 1.93 MiB/s, done.
   Total 9 (delta 4), reused 0 (delta 0), pack-reused 0 (from 0)
   remote: Resolving deltas: 100% (4/4), completed with 4 local objects.
   To https://github.com/fmonfasani/PF-pupshops.git
   1b81f16..dccd1e2 feature/migration-init -> feature/migration-init

7. <git status> me fijo en el estado en que estoy

   On branch feature/migration-init
   Your branch is up to date with 'origin/feature/migration-init'.

nothing to commit, working tree clean

8. <git branch> chequeo en que rama estoy
   back

- feature/migration-init
  front
  main"

9. <git checkout main> <OJOO!!!> me paso a la rama main

   Switched to branch 'main'
   Your branch is up to date with 'origin/main'.

10. <git status> chequeo y confirmo que estoy en la main

    Switched to branch 'main'
    Your branch is up to date with 'origin/main'.

11. <git pull origin main> me traigo todo lo del repo remoto desde origen

    remote: Enumerating objects: 2, done.
    remote: Counting objects: 100% (2/2), done.
    remote: Compressing objects: 100% (2/2), done.
    remote: Total 2 (delta 0), reused 0 (delta 0), pack-reused 0 (from 0)
    Unpacking objects: 100% (2/2), 1.78 KiB | 165.00 KiB/s, done.
    From https://github.com/fmonfasani/PF-pupshops

- branch main -> FETCH_HEAD
  8a10093..6abdfa3 main -> origin/main
  Updating 8a10093..6abdfa3
  Fast-forward
  PupShops/back/pupshops/package-lock.json | 87 +++++++--------
  PupShops/back/pupshops/package.json | 10 +-
  PupShops/back/pupshops/src/app.module.ts | 5 +-
  PupShops/back/pupshops/src/config/typeorm.ts | 15 ++-
  .../src/migrations/1726224990864-initial.ts | 42 ++++++++
  .../modules/locations/entities/location.entity.ts | 21 ++++
  .../modules/order/entities/order-detail.entity.ts | 64 ++++++-----
  .../src/modules/order/entities/order.entity.ts | 40 ++++---
  .../modules/products/entities/product.entity.ts | 118 ++++++++++-----------
  .../src/modules/users/entities/user.entity.ts | 16 +--
  .../pupshops/src/modules/users/users.module.ts | 3 +
  PupShops/back/pupshops/tsconfig.json | 6 +-
  12 files changed, 252 insertions(+), 175 deletions(-)
  create mode 100644 PupShops/back/pupshops/src/migrations/1726224990864-initial.ts
  create mode 100644 PupShops/back/pupshops/src/modules/locations/entities/location.entity.ts

13. <git merge feature/migration-init> <OJO!!>Esto lo estamos haciendo desde el github, o por aca con CLI

    Already up to date.

14. <git branch -d feature/migration-init> Si ya termine mi feature (funcion), borro la rama local

    Deleted branch feature/migration-init (was dccd1e2).

15. <git push origin --delete feature/migration-init> <opcional> borro la rama remota

    To https://github.com/fmonfasani/PF-pupshops.git

- [deleted] feature/migration-init
